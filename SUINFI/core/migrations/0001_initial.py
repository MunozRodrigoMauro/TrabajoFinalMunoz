# Generated by Django 5.2.4 on 2025-07-16 17:00

import django.contrib.auth.models
import django.contrib.auth.validators
import django.db.models.deletion
import django.utils.timezone
from django.conf import settings
from django.db import migrations, models


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('auth', '0012_alter_user_first_name_max_length'),
    ]

    operations = [
        migrations.CreateModel(
            name='PaymentMethod',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(choices=[('cash', 'Cash'), ('credit_card', 'Credit Card'), ('debit_card', 'Debit Card'), ('paypal', 'PayPal'), ('mercado_pago', 'Mercado Pago')], max_length=50, unique=True)),
            ],
        ),
        migrations.CreateModel(
            name='Service',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=100)),
                ('category', models.CharField(choices=[('plumbing', 'Plumbing'), ('electricity', 'Electricity'), ('cleaning', 'Cleaning'), ('gardening', 'Gardening'), ('technology', 'Technology'), ('construction', 'Construction'), ('carpentry', 'Carpentry'), ('painting', 'Painting'), ('security', 'Security'), ('transport', 'Transport & Moving'), ('mechanics', 'Mechanics & Auto Services'), ('healthcare', 'Healthcare'), ('beauty', 'Beauty & Personal Care'), ('pets', 'Pet Services'), ('events', 'Events & Entertainment'), ('education', 'Education & Tutoring'), ('it_support', 'IT Support & Networking'), ('legal', 'Legal Services'), ('finance', 'Finance & Accounting'), ('maintenance', 'General Maintenance'), ('appliances', 'Appliance Repair'), ('real_estate', 'Real Estate Services'), ('marketing', 'Marketing & Advertising'), ('writing', 'Writing & Translation'), ('coaching', 'Coaching & Mentoring'), ('home_decor', 'Home Decor & Interior Design'), ('freelance', 'Freelance & Remote Work'), ('other', 'Other')], default='other', max_length=50)),
                ('price_per_hour', models.DecimalField(decimal_places=2, max_digits=10)),
            ],
        ),
        migrations.CreateModel(
            name='User',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('password', models.CharField(max_length=128, verbose_name='password')),
                ('last_login', models.DateTimeField(blank=True, null=True, verbose_name='last login')),
                ('is_superuser', models.BooleanField(default=False, help_text='Designates that this user has all permissions without explicitly assigning them.', verbose_name='superuser status')),
                ('username', models.CharField(error_messages={'unique': 'A user with that username already exists.'}, help_text='Required. 150 characters or fewer. Letters, digits and @/./+/-/_ only.', max_length=150, unique=True, validators=[django.contrib.auth.validators.UnicodeUsernameValidator()], verbose_name='username')),
                ('first_name', models.CharField(blank=True, max_length=150, verbose_name='first name')),
                ('last_name', models.CharField(blank=True, max_length=150, verbose_name='last name')),
                ('email', models.EmailField(blank=True, max_length=254, verbose_name='email address')),
                ('is_staff', models.BooleanField(default=False, help_text='Designates whether the user can log into this admin site.', verbose_name='staff status')),
                ('is_active', models.BooleanField(default=True, help_text='Designates whether this user should be treated as active. Unselect this instead of deleting accounts.', verbose_name='active')),
                ('date_joined', models.DateTimeField(default=django.utils.timezone.now, verbose_name='date joined')),
                ('address', models.JSONField(blank=True, null=True)),
                ('phone', models.CharField(max_length=20)),
                ('gender', models.CharField(default='unspecified', max_length=20)),
                ('birthdate', models.DateField(blank=True, null=True)),
                ('groups', models.ManyToManyField(blank=True, help_text='The groups this user belongs to. A user will get all permissions granted to each of their groups.', related_name='user_set', related_query_name='user', to='auth.group', verbose_name='groups')),
                ('user_permissions', models.ManyToManyField(blank=True, help_text='Specific permissions for this user.', related_name='user_set', related_query_name='user', to='auth.permission', verbose_name='user permissions')),
            ],
            options={
                'verbose_name': 'user',
                'verbose_name_plural': 'users',
                'abstract': False,
            },
            managers=[
                ('objects', django.contrib.auth.models.UserManager()),
            ],
        ),
        migrations.CreateModel(
            name='Avatar',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('image', models.ImageField(blank=True, null=True, upload_to='avatares')),
                ('user', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, related_name='avatar', to=settings.AUTH_USER_MODEL)),
            ],
        ),
        migrations.CreateModel(
            name='Client',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('contract_history', models.JSONField(default=list)),
                ('user', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, related_name='client_profile', to=settings.AUTH_USER_MODEL)),
                ('payment_methods', models.ManyToManyField(blank=True, to='core.paymentmethod')),
            ],
        ),
        migrations.CreateModel(
            name='Professional',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('profession', models.CharField(choices=[('plumber', 'Plumber'), ('electrician', 'Electrician'), ('cleaner', 'Cleaner'), ('gardener', 'Gardener'), ('developer', 'Developer'), ('designer', 'Designer'), ('mechanic', 'Mechanic'), ('painter', 'Painter'), ('mason', 'Mason'), ('carpenter', 'Carpenter'), ('locksmith', 'Locksmith'), ('hvac_technician', 'HVAC Technician'), ('welder', 'Welder'), ('nurse', 'Nurse'), ('chef', 'Chef'), ('dog_walker', 'Dog Walker'), ('babysitter', 'Babysitter'), ('personal_trainer', 'Personal Trainer'), ('tutor', 'Tutor'), ('translator', 'Translator'), ('event_planner', 'Event Planner'), ('photographer', 'Photographer'), ('videographer', 'Videographer'), ('it_support', 'IT Support'), ('roofing_specialist', 'Roofing Specialist'), ('pest_control', 'Pest Control'), ('interior_designer', 'Interior Designer'), ('landscaper', 'Landscaper'), ('barber', 'Barber'), ('makeup_artist', 'Makeup Artist'), ('other', 'Other')], default='other', max_length=100, unique=True)),
                ('is_verified', models.BooleanField(default=False)),
                ('user', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, related_name='professional_profile', to=settings.AUTH_USER_MODEL)),
                ('services', models.ManyToManyField(blank=True, related_name='professionals', to='core.service')),
            ],
        ),
        migrations.CreateModel(
            name='Contract',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('status', models.CharField(choices=[('pending', 'Pending'), ('in_progress', 'In Progress'), ('completed', 'Completed'), ('cancelled', 'Cancelled')], default='pending', max_length=50)),
                ('client', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='contracts', to='core.client')),
                ('professional', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='contracts', to='core.professional')),
                ('service', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='contracts', to='core.service')),
            ],
        ),
    ]
